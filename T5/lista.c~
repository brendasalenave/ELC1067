#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lista.h"
#include "memo.h"

//Definição do tipo lista
/*struct lista_tento{
    struct lista_tento *ant;
    char* info;
    struct lista_tento *prox;
};
typedef struct Elem lista_t;*/

lista_t* cria_lista(){
    lista_t* li = (lista_t*)memo_aloca(sizeof(lista_t));
    if(li != NULL)
        li = NULL;
    return li;
}

int vazia(lista_t* l){
     return (l == NULL);
}

void libera_lista(lista_t* li){
    if(li != NULL){
        lista_t* no;
        while(!vazia(li)){
            no = li;
            li = li->prox;
            free(no);
        }
        free(li);
    }
}

int consulta_lista_pos(lista_t* li, int pos, char* str){
    if(li == NULL || pos <= 0)
        return 0;
    lista_t *no = li;
    int i = 1;
    while(no != NULL && i < pos){
        no = no->prox;
        i++;
    }
    if(no == NULL)
        return 0;
    else{
	strcpy(str, no->info);
        //*str = no->info;
        return 1;
    }
}


lista_t* insere_final(lista_t* li, char* str){
    if(li == NULL) return NULL;
    lista_t *no;
    no = (lista_t*)memo_aloca(sizeof(lista_t));

    if(no == NULL) return NULL;

    strcpy(no->info, str);    
    no->prox = NULL;
    if(vazia(li)){//lista vazia: insere início
        no->ant = NULL;
        li = no;
    }else{
        lista_t *aux;
        aux = li;
        while(aux->prox != NULL){
            aux = aux->prox;
        }
        aux->prox = no;
        no->ant = aux;
    }
    return no;
}

/* inserção no início */

lista_t* insere_inicio(lista_t* l, char* str){

     lista_t* novo = (lista_t*) malloc(sizeof(lista_t));
     strcpy(novo->info, str); 
     novo->prox = l;
     novo->ant = NULL;
     /* verifica se lista não está vazia */

     if (l != NULL)
         l->ant = novo;

     return novo;
}

lista_t* buscar(lista_t* inicio, char* str){
       lista_t* p;
       for (p=inicio; p!= NULL; p=p->prox){
	int cmp = strcmp(p->info, str);
           if (cmp==0){
              return p;
           }
	}
       return NULL;
}

#if 0
lista_t* remove_lista(lista_t* inicio){
       lista_t* p = ; // = buscar(inicio, str);
       if (p==NULL) return inicio;
       
       if (inicio == p)
       inicio = p->prox;
       else
           p->ant->prox = p->prox;
           
       if (p->prox != NULL)
       p->prox->ant = p->ant;
       
       free(p);
       return inicio;
}
#endif

lista_t* remove_lista_inicio(lista_t* li){
    if(li == NULL) return NULL;
    if(vazia(li)) return NULL;

    lista_t *no = li;
    li = no->prox;
    if(no->prox != NULL)
        no->prox->ant = NULL;

    free(no);
    return no;
}

/*int remove_lista(lista_t* li, char* str){//TERMINAR
    if(li == NULL)
        return 0;
    if(vazia(li))//lista vazia
        return 0;
    lista_t *no = li;
    while(no != NULL && (strcmp(no->info,str) != 0)){
        no = no->prox;
    }
    if(no == NULL)//não encontrado
        return 0;

    if(no->ant == NULL)//remover o primeiro?
        li = no->prox;
    else
        no->ant->prox = no->prox;

    if(no->prox != NULL)//não é o último?
        no->prox->ant = no->ant;

    free(no);
    return 1;
}

int remove_lista_fim(lista_t* li){
    if(li == NULL)
        return 0;
    if(vazia(li))//lista vazia
        return 0;

    lista_t *no = li;
    while(no->prox != NULL)
        no = no->prox;

    if(no->ant == NULL)//remover o primeiro e único
        li = no->prox;
    else
        no->ant->prox = NULL;

    free(no);
    return 1;
}*/

int tamanho_lista(lista_t* li){
    if(li == NULL)
        return 0;
    int cont = 0;
    lista_t* no = li;
    while(no != NULL){
        cont++;
        no = no->prox;
    }
    return cont;
}

int lista_cheia(lista_t* li){
    return 0;
}


void imprime_lista(lista_t* li){
    if(li == NULL)
        return;
    lista_t* no = li;
    while(no != NULL){
        printf("%s\n",no->info);
        no = no->prox;
    }
}
